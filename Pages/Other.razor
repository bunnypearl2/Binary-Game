@inject IJSRuntime JS
@page "/other"


<PageTitle>Other</PageTitle>

<h3>Hello, User!</h3>


@*INPUT SELECTION ROW*@
<div class="row">

    @***INPUT BOX***@
    <EditForm Model="@formData" OnValidSubmit="HandleSubmit">
        <div>
            <label for="firstinput">Input (max 16 characters):</label>
            <InputText id="firstinput" @bind-Value="formData.input" class="form-control" maxlength="16"/>
        </div>

        <button type="submit" class="btn btn-primary mt-2">Submit</button>
    </EditForm>

    <p>Submitted Name: @inputString</p>
    <p>@errorMessage</p>
    <p>Decimal Value: @inputDecimal</p>
    <p>Twos Comp Decimal: @twosCompDecimal</p>

    @***MAIN DROPDOWN***@
    <div class="col-auto">
        <select @bind="inputRadix">
            @foreach (var option in options)
            {
                <option value="@option">@option</option>
            }
        </select>
        <p>Selected Base: @inputRadix</p>
    </div>
</div>

@***TOGGLE BUTTON***@ 
<div class="col-auto">
    <style>
        .toggle-on {
        background-color: green;
        color: white;
        }

        .toggle-off {
        background-color: red;
        color: white;
        }
    </style>

    <button @onclick="ToggleQuiz" class="@(isQuizzing ? "toggle-on" : "toggle-off")">
        @(isQuizzing ? "QUIZ ON" : "QUIZ OFF")
    </button>

    <p>Status: @(isQuizzing ? "Active" : "Inactive")</p>
</div>
<!-- End INPUT SELECTION ROW-->



<!-- Begin body of page -->

<table>
    @for (int row = 0; row < numOfRows; row++)
    {


        <tr>
            @for (int col = 0; col < numOfColumns; col++)
            {
                int i = row;
                int j = col;
                int index = i * numOfColumns + j; // Calculate the index based on row and column
                <td>

                    <input @ref="textBoxRefs[index]"
                    value="@textValues[i, j]"
                    @onclick="(e) => HandleInputClick(e, index)"
                    @oninput="(e) => MoveNext(e, i , j, index)"
                    @onkeyup="(e) => HandleKeyNavigation(e, i, j, index)"
                    @onblur="(e) => FillWhitespace(index)"
                    class="form-control text-center mx-1"
                    maxlength="1"
                    style="width: 50px; display: inline-block;" />
                </td>

            }

            @{
                int k = row;
                <td class="col-auto">
                    <select @bind:get="GetDropdownValue(k)" @bind:set="newValue => RowCalculation(k, newValue)">
                        @foreach (var option in options)
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                    <p>Selected Base: @radixRow[k]</p>
                </td>

                <td>

                    <button @onclick="() => TwosComp(k)">2's Comp'</button>
                </td>
            }



        </tr>
    }
</table>




@code {
    // FOR MAIN INPUT BOX
    private int inputRadix = 2;
    private string inputString { get; set; } = ""; // main input box variable
    private int inputDecimal = 0;
    private int twosCompDecimal = 0;
    private string errorMessage { get; set; } = "";
    private FormModel formData = new FormModel();

    // FOR MAIN INPUT SUBMIT FORM - so submits on enter key
    private class FormModel
    {
        public string input { get; set; } = "";
    }

    // Evaluate main input upon entry or hitting submit
    private void HandleSubmit()
    {
        errorMessage = "";
        inputString = formData.input.ToUpper();
        inputString = inputString.PadLeft(16, '0');

        // Check if input is valid

        // Loop through string to make sure each char is valid
        foreach (char ch in inputString)
        {
            //if valid character, plug char into dictionary to compare to radix value
            if (!char.IsLetterOrDigit(ch) || charDict[ch] >= inputRadix)
            {
                errorMessage = "Input out of bounds of radix";
                return;
            }
        }

        // Calculate conversions
        ToDecimal(); //update decimal value

        // call function that's called by dropdown boxes

    }

    // CALCULATES DECIMAL FROM MAIN INPUT
    private void ToDecimal()
    {
        //Use "inputRadix" and "inputString" to calculate decimal value "inputDecimal"
        inputDecimal = 0; //reset inputDecimal
        char[] inputArray = inputString.ToCharArray();
        inputArray = inputArray.Reverse().ToArray();

        for (int i = 0; i < inputArray.Length; i++)
        {
            inputDecimal += charDict[inputArray[i]] * (int)Math.Pow(inputRadix, i);
        }

        // Determin positive decimal value to represent twos complement
        twosCompDecimal = 0; //reset twosCompDecimal
        if (inputDecimal < 32768)
        {
            twosCompDecimal = 32768 - inputDecimal;// - (int)Math.Pow(2, 16);
        }
        else if (inputDecimal >= 32768)
        {
            twosCompDecimal = inputDecimal - 32768;
        }
        else //inputDecimal == 32768
        {
            twosCompDecimal = 32768;
        }
        


    }

    // 
    public Dictionary<char,int> charDict = new Dictionary<char, int>
{
    { '0', 0 }, { '1', 1 }, { '2', 2 }, { '3', 3 }, { '4', 4 }, { '5', 5 },
    { '6', 6 }, { '7', 7 }, { '8', 8 }, { '9', 9 },
    { 'A', 10 }, { 'B', 11 }, { 'C', 12 }, { 'D', 13 }, { 'E', 14 },
    { 'F', 15 }, { 'G', 16 }, { 'H', 17 }, { 'I', 18 }, { 'J', 19 },
    { 'K', 20 }, { 'L', 21 }, { 'M', 22 }, { 'N', 23 }, { 'O', 24 },
    { 'P', 25 }, { 'Q', 26 }, { 'R', 27 }, { 'S', 28 }, { 'T', 29 },
    { 'U', 30 }, { 'V', 31 }, { 'W', 32 }, { 'X', 33 }, { 'Y', 34 }, { 'Z', 35 }
};


    // FOR DROPDOWN BOXES

    private int[] radixRow = new int[4]; // number of rows; stores selected radix for each row
    private char[][] rowNum = new char[3][]; //jagged array, but could be 2D array?
    private List<int> options = new() { 2, 8, 10, 16 };

    // UPDATE RADIX FOR DROPDOWN FOR A GIVEN ROW
    private int GetDropdownValue(int index)
    {
        return radixRow[index];
    }

    // CALCULATE CONVERSION NEEDED FOR GIVEN DROPDOWN
    private void RowCalculation(int rowNum, int selectedRadix)
    {
        radixRow[rowNum] = selectedRadix; //update radix for given row

        // Update textbox values for row


    }

    

    // FOR INDIVIDUAL INPUT BOXES
    public const int numOfColumns = 16; // Number of columns per row
    public const int numOfRows = 4;    // Number of rows
    public const int totalBoxes = numOfRows * numOfColumns; // Total boxes

    private char?[,] textValues = new char?[numOfRows, numOfColumns]; // Text values in grid
    private ElementReference[] textBoxRefs = new ElementReference[totalBoxes]; // Array to store references
                                                                               //private bool[,] boxDisabled = new bool[numOfRows, numOfColumns]; // keeps track of disabled boxes




   
    
    // functionality for QUIZ toggle button
    private bool isQuizzing = false;

    private void ToggleQuiz()
    {
        isQuizzing = !isQuizzing;

        // if switched to on AND input box is empty, generate random number to assign to input box

        // Loop through

    }

    private void GenerateRand()
    {

    }





    // TWOS COMPLEMENT TOGGLE/BUTTON
    private void TwosComp(int row)
    {

    }


    // Initialize boxes to zero
    // UPDATE ACCORDING TO DEFAULT RADIXES SELECTED
    protected override void OnInitialized()
    {
        // Start with one row
        for (int i = 0; i < numOfRows; i++)
        {
            for (int j = 0; j < numOfColumns; j++)
                textValues[i, j] = '0';
        }



    }

    // Method to gray out all textboxes
    private async Task GrayOutTextboxes(ElementReference[] boxRefs)
    {
        await JS.InvokeVoidAsync("grayOutElements", boxRefs);
    }

    // Method to enable all textboxes
    private async Task EnableTextboxes(ElementReference[] boxRefs)
    {
        await JS.InvokeVoidAsync("enableElements", boxRefs);
    }

    private async Task HandleInputClick(MouseEventArgs e, int index)
    {
        // Get the ElementReference from the dictionary based on the unique ID
        if (index < totalBoxes)
        {
            // Use JavaScript Interop to select all text inside the input box
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index]);
        }
    }

    // HANDLES INPUT
    private async Task MoveNext(ChangeEventArgs e, int row, int col, int index)
    {

        string input = e.Value?.ToString() ?? "";
        if (input != "")
        {
            char inChar = char.Parse(input);

            //if (char.IsLetterOrDigit(inChar))
            // Check if the character is valid (e.g., letter or digit)
           

            textValues[row, col] = inChar; // Update the character

            await AutoTab(row, col, index);
                    
        }
        else

        // COMPARE CHAR/DIGIT WITH ANS TO CHANGE COLOR OF TEXT


        StateHasChanged();//update

    }

    // REPLACES BLANK BOXES WITH '0'
    private async Task FillWhitespace(int index)
    {
        // Use JavaScript Interop to directly update the value if it's empty
        await JS.InvokeVoidAsync("setInputToZeroIfEmpty", textBoxRefs[index]);
    }

    // HANDLES OTHER KEYS ENTERED FOR NAVIGATION    
    private async Task HandleKeyNavigation(KeyboardEventArgs e, int row, int col, int index)
    {
        if (e.Key == "ArrowLeft" && index > 0)
        {
            await textBoxRefs[index - 1].FocusAsync();
            //await JS.InvokeVoidAsync("focusElement", textBoxRefs[index - 1]); // Move left
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index - 1]);
        }
        else if ((e.Key == "ArrowRight" || e.Key == "Enter") && index < totalBoxes)
        {
            await textBoxRefs[index + 1].FocusAsync();
            //await JS.InvokeVoidAsync("focusElement", textBoxRefs[index + 1]); // Move right
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index + 1]);
        }
        

        

    }



    private async Task AutoTab(int row, int col, int index)
    {


        if (index < textBoxRefs.Length - 1 && textValues[row,col] != '\0') //i.e. less than numOfRows * numOfColumns - 1
        {
            await Task.Delay(50); // Small delay for UI update
                                  //await textBoxRefs[index + 1].FocusAsync(); // Move focus
            await JS.InvokeVoidAsync("focusElement", textBoxRefs[index + 1]); // Select text
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index + 1]); // Select text
        }
    }

    
    //


}



@*


@page "/enter-focus"

<input id="input1" type="text" onkeydown="moveNext(event, 'input2')" />
<input id="input2" type="text" onkeydown="moveNext(event, 'input3')" />
<input id="input3" type="text" />

@code {
    [Inject] IJSRuntime JS { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupEnterKey");
        }
    }
}


 /*
    private Dictionary<string, ElementReference> inputRefs = new Dictionary<string, ElementReference>(); // Dictionary to store references
    private string clickedId = ""; // Variable to store clicked input's unique ID

    // Handle the click event and select all text in the clicked input
    private async Task HandleInputClick(MouseEventArgs e, string uniqueId)
        {
        clickedId = uniqueId; // Set the clicked ID for display
        Console.WriteLine($"Input clicked with unique ID: {clickedId}");

        // Get the ElementReference from the dictionary based on the unique ID
        if (inputRefs.TryGetValue(uniqueId, out var element))
            {
            // Use JavaScript Interop to select all text inside the input box
            await JSRuntime.InvokeVoidAsync("selectText", element);
    }
    }
    */


@* Example functionality to have cursor active in a given text box after hitting submit*@
@* See function in site.js file in wwwroot*@
@*
<input id="myInput" type="text" placeholder="Click the button" class="form-control" />
<input id="myInput1" type="text" placeholder="Click the button" class="form-control" />

<button @onclick="SetFocus">Focus Input</button>

@code {
    [Inject] IJSRuntime JS { get; set; }

    private async Task SetFocus()
    {
        await JS.InvokeVoidAsync("focusInput", "myInput1"); /* Change "myInput" to the id of the text box you want to go to? */
    }
}
*@

