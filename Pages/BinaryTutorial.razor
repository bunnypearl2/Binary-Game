@page "/BinaryTutorial"

@inject IJSRuntime JS

<PageTitle>Binary Tutorial: Conversion, Arithmetic, and Hexadecimals</PageTitle>


       

<h4>Unsigned Decimal: @num.base10</h4>
<h4>Signed Decimal: @num.twosCompliment</h4>
<h4 style="padding-bottom: 15px;">Hexadecimal: @num.base16</h4>

<!--handles fitting for mobile-->
<div style="width: 100%; overflow: auto">
    <div class="zoom-container">
<!--start toggle row-->
<div class="input-row">
   

    <Tooltip Class="d-inline-block" Title="@fifteenVal" role="button">
        <button style="background-color:@bgcolor15" @onclick=ToggleB15>@num.b15</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">15</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@fourteenVal" role="button">
        <button style="background-color:@bgcolor14" @onclick=ToggleB14>@num.b14</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">14</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@thirteenVal" role="button">
        <button style="background-color:@bgcolor13" @onclick=ToggleB13>@num.b13</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">13</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@twelveVal" role="button">
        <button style="background-color:@bgcolor12" @onclick=ToggleB12>@num.b12</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">12</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@elevenVal" role="button">
        <button style="background-color:@bgcolor11" @onclick=ToggleB11>@num.b11</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">11</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@tenVal" role="button">
        <button style="background-color:@bgcolor10" @onclick=ToggleB10>@num.b10</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">10</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@nineVal" role="button">
        <button style="background-color:@bgcolor9" @onclick=ToggleB9>@num.b9</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">9</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@eightVal" role="button">
        <button style="background-color:@bgcolor8" @onclick=ToggleB8>@num.b8</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">8</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@sevenVal" role="button">
        <button style="background-color:@bgcolor7" @onclick=ToggleB7>@num.b7</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">7</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@sixVal" role="button">
        <button style="background-color:@bgcolor6" @onclick=ToggleB6>@num.b6</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">6</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@fiveVal" role="button">
        <button style="background-color:@bgcolor5" @onclick=ToggleB5>@num.b5</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">5</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@fourVal" role="button">
        <button style="background-color:@bgcolor4" @onclick=ToggleB4>@num.b4</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">4</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@threeVal" role="button">
        <button style="background-color:@bgcolor3" @onclick=ToggleB3>@num.b3</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">3</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@twoVal" role="button">
        <button style="background-color:@bgcolor2" @onclick=ToggleB2>@num.b2</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">2</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title="@oneVal" role="button">
        <button style="background-color:@bgcolor1" @onclick=ToggleB1>@num.b1</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">1</label>
        </div>
    </Tooltip>

    <Tooltip Class="d-inline-block" Title= "@zeroVal" role="button">
        <button style="background-color:@bgcolor0" @onclick=ToggleB0>@num.b0</button>
        <div class="mt-1 text-center w-100" style="font-size: 14px">
            <label class="d-block">0</label>
        </div>
    </Tooltip>

    <!--
    <button class="btn btn-primary" @onclick="Calculate">Submit</button>-->
    <button class="btn btn-primary ms-4" @onclick="Clear">Clear</button>

</div>


    </div>
</div>

<p> <strong>Help Sections</strong></p>
<p>
    The text below will introduce you to binary, converting to and from it, basic arithmetic, and how it's related to decimal and hexadecimal. Use the helper tool above to visualize as you follow along!
</p>
<hr>
<p> <strong>Introduction to Binary</strong></p>
<p> 0's and 1's are commonly used to represent the ON or OFF state of switches or transistors in computers.  In binary, these digits are referred to as "bits". 
    <i>Try switching the bits above!</i>
</p>
<p> In this example, there are 16 places for digits/bits. So, there are 2<sup>16</sup> = 65536 possible combinations of 0's and 1's we can make. 
    Think of how decimal notation (base 10) assigns greater value to progressive digit places - 1,10,100,1000,10000... (10<sup>0</sup>, 10<sup>1</sup>,10<sup>2</sup>,
    10<sup>3</sup>,10<sup>4</sup>...). Binary (base 2) works the same way: 1,2,4,8,16... (2<sup>0</sup>, 2<sup>1</sup>,2<sup>2</sup>,2<sup>3</sup>,2<sup>4</sup>).</p>
<hr>
<p><strong>Converting Between Binary & Decimal Numbers</strong></p>
<p>Binary and decimal are different ways of expressing the same number in a different base. There are different methods of converting between the two. Here are some useful ones if all you have is mental math or pen and paper to work with.
</p>
<p>
    <i>Decimal to Binary by Long Division</i>
    <br>You can use repeated long division by 2 to convert a decimal number to binary. For example, take 102.
    <br>Divide it by 2: you get 51, with a remainder of <strong>0</strong>. Write down that remainder: this will be your <i>least significant</i> (rightmost) bit.
    <br>Now divide 51 by 2 again: you get 25, with a remainder of <strong>1</strong>. This'll be your next bit, to the left (more significant) of the last one.
    <br>Again: 25/2 = 12, remainder <strong>1</strong>.
    <br>12/2 = 6, remainder <strong>0</strong>.
    <br>6/2 = 3, remainder <strong>0</strong>.
    <br>3/2 = 1, remainder <strong>1</strong>.
    <br>1/2 = 0, remainder <strong>1</strong>. <i>Now that you've reached a quotient of 0, stop here!</i> This is your <i>most significant</i> (leftmost) bit.
    <br>Now, just write the remainders in order of significance (most to least): <strong>1100110</strong>. Remember: you found the least-significant bits first, so this'll be in "reverse order".
</p>
<br>
<p>
    <i>Decimal to Binary by Descending Powers of Two</i>
    <br>If you remember your powers of 2, you can use these to find the binary value of a decimal a little faster than by repetitive division. We've got just such a <a href="/cheatsheet">Cheat Sheet</a> table available for you!
    <br>Let's convert decimal 102 to binary again.
    <br>Start by looking for the <i>greatest</i> power of 2 that still fits into the number. In this case, that's 64. Subtract that from our number (102-64 = 38).
    <br>Now, look for the power of 2 that'll fit into the subtraction. 32 is the biggest power of 2 that'll fit into 38. Once again, subtract it! (38-32 - 6).
    <br>Same story: 4 is the biggest power of 2 that fits into 6. (6-4 = 2).
    <br>(2-2 = 0). Once again, stop when you reach 0!
    <br>Now, line up all of the powers of 2, from the greatest one you used all the way down to 0:
    <br><strong>64, 32, 16, 8, 4, 2, 1</strong>
    <br>For every one of these that you used, write 1. For every one you didn't, mark 0:
    <br><strong>1, 1, 0, 0, 1, 1, 0</strong>.... i.e. 1100110. Look familiar?
</p>
<br>
<p>
    <i>Binary to Decimal by Powers</i>
    <br>This is even easier than converting decimal to binary. Let's say we want to convert 11011011 to decimal.
    <br>First, write out each of the bits' place values:
    <br>2<sup>7</sup>, 2<sup>6</sup>, 2<sup>5</sup>, 2<sup>4</sup>, 2<sup>3</sup>, 2<sup>2</sup>, 2<sup>1</sup>, 2<sup>0</sup>
    <br>= 128, 64, 32, 16, 8, 4, 2, 1
    <br>Now, multiply each place by its bit (0 or 1):
    <br>128, 64, 0, 16, 8, 0, 2, 1
    <br>Add these to get your result: <strong>219</strong>.
</p>
<br>
<p>
    <i>Binary to Decimal by Doubling</i>
    <br>If you're converting a number in your head, this method is a lot easier. We'll convert 11011011 again.
    <br>[<strong>1</strong>1011011] Starting from the most significant (leftmost) bit, double your running total and add the current digit. (Your running total is 0, since you haven't started yet!)
    <br>Doing it the first time, you double 0 (i.e. you get 0) and add 1, the current digit (running total <strong>1</strong>).
    <br>[1<strong>1</strong>011011] Now do it to the next (less significant) digit. Double your total (1*2 = 2) and add the current digit (2+1 = <strong>3</strong>).
    <br>[11<strong>0</strong>11011] Repeat this over and over... (3*2 = 6, + 0 = <strong>6</strong>)
    <br>[110<strong>1</strong>1011] 6*2 = 12, + 1 = <strong>13</strong>
    <br>[1101<strong>1</strong>011] 13*2 = 26, + 1 = <strong>27</strong>
    <br>[11011<strong>0</strong>11] 27*2 = 54, + 0 = <strong>54</strong>
    <br>[110110<strong>1</strong>1] 54*2 = 108, + 1 = <strong>109</strong>
    <br>[1101101<strong>1</strong>] 109*2 = 218, + 1 = <strong>219</strong>...your final result, now that you have no more digits!
</p>
<hr>
<p><strong>Signing and Two's Complement</strong></p> 
<p>
    Negative numbers are usually represented with a "-" sign. Most computers, though, represent negatives through <i>signed</i> binary values. In a nutshell, one of the bits is used as a "flag", marking if the number is positive or negative. 
    With 16 digits, we can represent numbers 0 to 65535 (unsigned decimal) or -32768 to 32767 (signed decimal). When the 2<sup>15</sup> bit is set to 1, every other bit that's set to 1 is <i>added</i> to -32768. So, the absolute value of the number goes down instead of up.
</p>
<p>
    You can convert a binary number to its negative counterpart via two's complement. Suppose we have 11110010 (242, in decimal), and we'd like to make this a negative value.
    <br>First, pad it out to 16 bits (or however many you're using): 0000 0000 1111 0010. (Notice that, for clarity's sake, we can group the digits into fours. This will be handy for hexadecimals, lower on this page.)
    <br>Simply flip every bit in place (1111 1111 0000 1101)...
    <br>...and add 1. (1111 1111 0000 1110). This is -242!
</p>
<hr>
<p><strong>Binary Addition and Subtraction</strong></p>
<p>
    Binary addition and subtraction is just like decimal, by and large. The only thing you have to remember is that you carry 2s, not 10s.
    <br>Let's look at the last four digits in the example above: 1101 + 1.
    <br>1+1 = 2. Remember that 2 in binary is 10 (2<sup>1</sup> * 1, + 2<sup>0</sup> * 0)!
    <br>So, write 0 in the 2<sup>1</sup> place (the rightmost, i.e. least significant, bit), and carry over the 1 into the next bit to the left to get 1110.
</p>
<p>
    Subtraction is easy: all it is just adding a negative number. Convert the value you're subtracting into a negative, via two's complement, and add it!
</p>
<br>
<p><strong>Binary Multiplication and Division</strong></p>
<p>
    Again: think of binary multiplication as the exact same process as decimal, just working with base 2 (i.e. carried 2s) in mind instead of base 10.
    <br>At the end of the day, the <i>underlying logic is the same!</i> This can't be stressed hard enough: the only thing that's different is the bases.
    <br>The same goes for long division!
</p>
<p>
    Go ahead and try multiplying and dividing a few small binary numbers on your own. If you'd like to check your work, you can practice converting your values to and from decimal. Use the pop-out decimal calculator at the top right of the page to help you.
</p>
<hr>
<p><strong>Hexadecimal Values</strong></p>
<p>
    Computers may ultimately work in binary, but (as you may already be discovering) it can be pretty long-winded. For example, decimal 2500 is 100111000100!
    <br>Hexadecimal numbers are base <i>16</i>, but you can really think of them as a way of easily representing base 2 values.
    <br>Here's the trick: all binary numbers from 0 to decimal 16 fit into four bits! (0000 to 1111).
    <br>If we divide 2500's binary representation into fours, i.e. 1001 1100 0100, we could assign each of these a hexadecimal digit.
    <br>Hexadecimal digits run from 0-9, just like decimal digits, but then fill the remaining 6 spaces with letters (A-F). For example, "13" in decimal is "D" in hexadecimal; "3" in decimal is "3" in hexadecimal.
    <br>2500 in hexadecimal (aka 1001 1100 0100) is <strong>9C4</strong>. That's a whole lot less of a mouthful. You can also easily convert it back to binary: again, each hex digit represents 4 bits (any combination from 0000 - 1111)!
</p>
<p>
    When grouping a binary number into four-bit pieces, do it from the least significant (rightmost) side first. If your last group doesn't cleanly fit, pad with zeroes.
    <br>For example, take decimal 582 (binary 1001000110). Grouping that, you get 10 0100 0110. Pad the leftmost group with zeroes to get 0010 0100 0110 (hexadecimal 246).
</p>

@code {

    string buttonclass { get; set; } = "btn btn-primary"; // (starting value)

    int currentCount = 0;
    string bgcolor0 { get; set; } = "#eca24a";
    string bgcolor1 { get; set; } = "#eca24a";
    string bgcolor2 { get; set; } = "#eca24a";
    string bgcolor3 { get; set; } = "#eca24a";
    string bgcolor4 { get; set; } = "#eca24a";
    string bgcolor5 { get; set; } = "#eca24a";
    string bgcolor6 { get; set; } = "#eca24a";
    string bgcolor7 { get; set; } = "#eca24a";
    string bgcolor8 { get; set; } = "#eca24a";
    string bgcolor9 { get; set; } = "#eca24a";
    string bgcolor10 { get; set; } = "#eca24a";
    string bgcolor11 { get; set; } = "#eca24a";
    string bgcolor12 { get; set; } = "#eca24a";
    string bgcolor13 { get; set; } = "#eca24a";
    string bgcolor14 { get; set; } = "#eca24a";
    string bgcolor15 { get; set; } = "#eca24a";


     /*
     MarkupString zeroVal = new MarkupString("2<sup>0</sup>");
     MarkupString oneVal = new MarkupString("2<sup>1</sup>");
     MarkupString twoVal = new MarkupString("2<sup>2</sup>");
     MarkupString threeVal = new MarkupString("2<sup>3</sup>");
     MarkupString fourVal = new MarkupString("2<sup>4</sup>");
     MarkupString fiveVal = new MarkupString("2<sup>5</sup>");
     MarkupString sixVal = new MarkupString("2<sup>6</sup>");
     MarkupString sevenVal = new MarkupString("2<sup>7</sup>");
     MarkupString eightVal = new MarkupString("2<sup>8</sup>");
     MarkupString nineVal = new MarkupString("2<sup>9</sup>");
     MarkupString tenVal = new MarkupString("2<sup>10</sup>");
     MarkupString elevenVal = new MarkupString("2<sup>11</sup>");
     MarkupString twelveVal = new MarkupString("2<sup>12</sup>");
     MarkupString thirteenVal = new MarkupString("2<sup>13</sup>");
     MarkupString fourteenVal = new MarkupString("2<sup>14</sup>");
     MarkupString fifteenVal = new MarkupString("2<sup>15</sup>");
     */

    string zeroVal = "2<sup>0</sup>";
    string oneVal = "2<sup>1</sup>";
    string twoVal = "2<sup>2</sup>";
    string threeVal = "2<sup>3</sup>";
    string fourVal = "2<sup>4</sup>";
    string fiveVal = "2<sup>5</sup>";
    string sixVal = "2<sup>6</sup>";
    string sevenVal = "2<sup>7</sup>";
    string eightVal = "2<sup>8</sup>";
    string nineVal = "2<sup>9</sup>";
    string tenVal = "2<sup>10</sup>";
    string elevenVal = "2<sup>11</sup>";
    string twelveVal = "2<sup>12</sup>";
    string thirteenVal = "2<sup>13</sup>";
    string fourteenVal = "2<sup>14</sup>";
    string fifteenVal = "2<sup>15</sup>";




    void ToggleB0()
    {

        if (num.b0 == 0)
        {
            num.b0 = 1;
            bgcolor0 = "#4ae1ec";

        }
        else if (num.b0 == 1)
        {
            num.b0 = 0;
            bgcolor0 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB1()
    {


        if (num.b1 == 0)
        {
            num.b1 = 1;
            bgcolor1 = "#4ae1ec";

        }
        else if (num.b1 == 1)
        {
            num.b1 = 0;
            bgcolor1 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB2()
    {

        if (num.b2 == 0)
        {
            num.b2 = 1;
            bgcolor2 = "#4ae1ec";

        }
        else if (num.b2 == 1)
        {
            num.b2 = 0;
            bgcolor2 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB3()
    {

        if (num.b3 == 0)
        {
            num.b3 = 1;
            bgcolor3 = "#4ae1ec";

        }
        else if (num.b3 == 1)
        {
            num.b3 = 0;
            bgcolor3 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }

    void ToggleB4()
    { 

        if (num.b4 == 0)
        {
            num.b4 = 1;
            bgcolor4 = "#4ae1ec";

        }
        else if (num.b4 == 1)
        {
            num.b4 = 0;
            bgcolor4 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB5()
    {

        if (num.b5 == 0)
        {
            num.b5 = 1;
            bgcolor5 = "#4ae1ec";

        }
        else if (num.b5 == 1)
        {
            num.b5 = 0;
            bgcolor5 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB6()
    {

        if (num.b6 == 0)
        {
            num.b6 = 1;
            bgcolor6 = "#4ae1ec";

        }
        else if (num.b6 == 1)
        {
            num.b6 = 0;
            bgcolor6 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB7()
    {

        if (num.b7 == 0)
        {
            num.b7 = 1;
            bgcolor7 = "#4ae1ec";

        }
        else if (num.b7 == 1)
        {
            num.b7 = 0;
            bgcolor7 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB8()
    {

        if (num.b8 == 0)
        {
            num.b8 = 1;
            bgcolor8 = "#4ae1ec";

        }
        else if (num.b8 == 1)
        {
            num.b8 = 0;
            bgcolor8 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB9()
    {

        if (num.b9 == 0)
        {
            num.b9 = 1;
            bgcolor9 = "#4ae1ec";

        }
        else if (num.b9 == 1)
        {
            num.b9 = 0;
            bgcolor9 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }

    void ToggleB10()
    {

        if (num.b10 == 0)
        {
            num.b10 = 1;
            bgcolor10 = "#4ae1ec";

        }
        else if (num.b10 == 1)
        {
            num.b10 = 0;
            bgcolor10 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }

    void ToggleB11()
    {

        if (num.b11 == 0)
        {
            num.b11 = 1;
            bgcolor11 = "#4ae1ec";

        }
        else if (num.b11 == 1)
        {
            num.b11 = 0;
            bgcolor11 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }

    void ToggleB12()
    {

        if (num.b12 == 0)
        {
            num.b12 = 1;
            bgcolor12 = "#4ae1ec";

        }
        else if (num.b12 == 1)
        {
            num.b12 = 0;
            bgcolor12 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }

    void ToggleB13()
    {

        if (num.b13 == 0)
        {
            num.b13 = 1;
            bgcolor13 = "#4ae1ec";

        }
        else if (num.b13 == 1)
        {
            num.b13 = 0;
            bgcolor13 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }
    void ToggleB14()
    {

        if (num.b14 == 0)
        {
            num.b14 = 1;
            bgcolor14 = "#4ae1ec";

        }
        else if (num.b14 == 1)
        {
            num.b14 = 0;
            bgcolor14 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }

    void ToggleB15()
    {

        if (num.b15 == 0)
        {
            num.b15 = 1;
            bgcolor15 = "#4ae1ec";

        }
        else if (num.b15 == 1)
        {
            num.b15 = 0;
            bgcolor15 = "#eca24a";
        }


        //buttonclass = "btn btn-secondary";
        StateHasChanged();  // may not be required, but I'm at work right now, so can't check
        Calculate();
    }

    //Update hints/labels


    // Calculate binary into decimal
    private void Calculate()
    {
        num.base10 = 1 * num.b0 + 2 * num.b1 + 4 * num.b2 + 8 * num.b3 + 16 * num.b4 + 32 * num.b5 + 64 * num.b6 + 128 * num.b7
        + 256 * num.b8 + 512 * num.b9 + 1024 * num.b10 + 2048 * num.b11 + 4096 * num.b12 + 8192 * num.b13 + 16384 * num.b14 + 32768 * num.b15;

        num.twosCompliment = 1 * num.b0 + 2 * num.b1 + 4 * num.b2 + 8 * num.b3 + 16 * num.b4 + 32 * num.b5 + 64 * num.b6 + 128 * num.b7
        + 256 * num.b8 + 512 * num.b9 + 1024 * num.b10 + 2048 * num.b11 + 4096 * num.b12 + 8192 * num.b13 + 16384 * num.b14 - 32768 * num.b15;

        int hexDigit1 = 1 * num.b0 + 2 * num.b1 + 4 * num.b2 + 8 * num.b3;
        string hexString1 = "0";

        switch (hexDigit1)
        {
            case 10:
                hexString1 = "A";
                break;
            case 11:
                hexString1 = "B";
                break;
            case 12:
                hexString1 = "C";
                break;
            case 13:
                hexString1 = "D";
                break;
            case 14:
                hexString1 = "E";
                break;
            case 15:
                hexString1 = "F";
                break;
            default:
                hexString1 = hexDigit1.ToString();
                break;
        }

        int hexDigit2 = 1 * num.b4 + 2 * num.b5 + 4 * num.b6 + 8 * num.b7;
        string hexString2 = "0";

        switch (hexDigit2)
        {
            case 10:
                hexString2 = "A";
                break;
            case 11:
                hexString2 = "B";
                break;
            case 12:
                hexString2 = "C";
                break;
            case 13:
                hexString2 = "D";
                break;
            case 14:
                hexString2 = "E";
                break;
            case 15:
                hexString2 = "F";
                break;
            default:
                hexString2 = hexDigit2.ToString();
                break;
        }

        int hexDigit3 = 1 * num.b8 + 2 * num.b9 + 4 * num.b10 + 8 * num.b11;
        string hexString3 = "0";

        switch (hexDigit3)
        {
            case 10:
                hexString3 = "A";
                break;
            case 11:
                hexString3 = "B";
                break;
            case 12:
                hexString3 = "C";
                break;
            case 13:
                hexString3 = "D";
                break;
            case 14:
                hexString3 = "E";
                break;
            case 15:
                hexString3 = "F";
                break;
            default:
                hexString3 = hexDigit3.ToString();
                break;
        }

        int hexDigit4 = 1 * num.b12 + 2 * num.b13 + 4 * num.b14 + 8 * num.b15;
        string hexString4 = "0";

        switch (hexDigit4)
        {
            case 10:
                hexString4 = "A";
                break;
            case 11:
                hexString4 = "B";
                break;
            case 12:
                hexString4 = "C";
                break;
            case 13:
                hexString4 = "D";
                break;
            case 14:
                hexString4 = "E";
                break;
            case 15:
                hexString4 = "F";
                break;
            default:
                hexString4 = hexDigit4.ToString();
                break;
        }

        num.base16 = hexString4 + hexString3 + hexString2 + hexString1;
    }

    private void Clear()
    {
        num.b0 = 0;
        num.b1 = 0;
        num.b2 = 0;
        num.b3 = 0;
        num.b4 = 0;
        num.b5 = 0;
        num.b6 = 0;
        num.b7 = 0;
        num.b8 = 0;
        num.b9 = 0;
        num.b10 = 0;
        num.b11 = 0;
        num.b12 = 0;
        num.b13 = 0;
        num.b14 = 0;
        num.b15 = 0;
        num.base10 = 0;
        num.twosCompliment = 0;
        num.base16 = "0000";

        // reset color
        for(int i = 0; i < 16; i++)
        {
            string color = "#eca24a";
            switch (i)
            {
                case 0: bgcolor0 = color; break;
                case 1: bgcolor1 = color; break;
                case 2: bgcolor2 = color; break;
                case 3: bgcolor3 = color; break;
                case 4: bgcolor4 = color; break;
                case 5: bgcolor5 = color; break;
                case 6: bgcolor6 = color; break;
                case 7: bgcolor7 = color; break;
                case 8: bgcolor8 = color; break;
                case 9: bgcolor9 = color; break;
                case 10: bgcolor10 = color; break;
                case 11: bgcolor11 = color; break;
                case 12: bgcolor12 = color; break;
                case 13: bgcolor13 = color; break;
                case 14: bgcolor14 = color; break;
                case 15: bgcolor15 = color; break;
            }

        }
    }


    // Define the Number class
    private class Number
    {
        public int b15 { get; set; }
        public int b14 { get; set; }
        public int b13 { get; set; }
        public int b12 { get; set; }
        public int b11 { get; set; }
        public int b10 { get; set; }
        public int b9 { get; set; }
        public int b8 { get; set; }
        public int b7 { get; set; }
        public int b6 { get; set; }
        public int b5 { get; set; }
        public int b4 { get; set; }
        public int b3 { get; set; }
        public int b2 { get; set; }
        public int b1 { get; set; }
        public int b0 { get; set; }

        public int base10 { get; set; }
        public int twosCompliment { get; set; }
        public string base16 { get; set; }
    }

    // Create an instance of Person and set initial values
    private Number num = new Number
        {
            b15 = 0,
            b14 = 0,
            b13 = 0,
            b12 = 0,
            b11 = 0,
            b10 = 0,
            b9 = 0,
            b8 = 0,
            b7 = 0,
            b6 = 0,
            b5 = 0,
            b4 = 0,
            b3 = 0,
            b2 = 0,
            b1 = 0,
            b0 = 0,
            base10 = 0,
            twosCompliment = 0,
            base16 = "0000"
        };


    // allows superscripts to be recognized in strings for tooltips
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeHtmlTooltips");
        }
    }
}
