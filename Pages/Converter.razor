@inject IJSRuntime JS
@page "/"


<PageTitle>Converter</PageTitle>

<h3></h3>

@*INPUT SELECTION ROW*@
<p>Input (max @numOfColumns characters)</p>

<div class="row" style="display: flex; align-items: flex-start; gap: 10px;">

    @***INPUT BOX***@
    <div class="col-auto">

        <EditForm Model="@formData" OnValidSubmit="HandleSubmit" class="edit-form">
            <InputText id="firstinput" onclick="selectTextBox" @bind-Value="formData.input" class="edit-input" maxlength="16" />
            <button type="submit" class="edit-button">Submit</button>
        </EditForm>
        <p>Values above @(Math.Pow(2, numOfColumns) - 1) will not be accepted</p>


        @* <p>Decimal Value: @inputDecimal</p> *@
        @* <p>Twos Comp Decimal: @twosCompDecimal</p> *@
        @* <p>@testMessage</p> *@
    </div>

    @***MAIN DROPDOWN***@
    <div class="col-auto" style="margin-left: 20px;">
        <select @onchange="UpdateDropdown">
            @foreach (var option in options)
            {
                <option value="@option">@option</option>
            }
        </select>
        <p>Selected Base: @inputRadix</p>
    </div>


</div>
<!-- End INPUT SELECTION ROW-->

<div class="container">
    <span>Input value: @(errorMessage != "" ? errorMessage : inputString) </span>
    <div class="trianglebutton-container">

        <button class="trianglebutton" @onclick="Increment">&#9650; </button> <!-- Up triangle -->
        <button class="trianglebutton" @onclick="Decrement">&#9660; </button> <!-- Down triangle -->

    </div>

</div>

<!-- Begin body of page -->

<table>
    @for (int row = 0; row < numOfRows; row++)
    {


        <tr>
            @for (int col = 0; col < numOfColumns; col++)
            {
                int i = row;
                int j = col;
                int index = i * numOfColumns + j; // Calculate the index based on row and column
                <td>

                    <input @ref="textBoxRefs[index]"
                    value="@textValues[i][j]"
                    @onclick="(e) => HandleInputClick(e, index)"
                    @oninput="(e) => MoveNext(e, i , j, index)"
                    @onkeyup="(e) => HandleKeyNavigation(e, i, j, index)"
                    readonly="@(!isQuizzing[i])"
                    class="form-control text-center mx-1"
                    maxlength="1"
                    style="width: 50px; display: inline-block;" />
                </td>

            }

            @{
                int k = row;
                <td class="col-auto">
                    <select @bind:get="GetDropdownValue(k)" @bind:set="newValue => RowCalculation(k, newValue)">
                        @foreach (var option in options)
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                    <p>Selected Base: @rowRadix[k]</p>
                </td>

                <td>

                    <button @onclick="() => TwosComp(k)" class="@(isTwosComp[k] ? "toggle-on" : "toggle-off")">2's Complement</button>
                </td>

                <td>
                    <button @onclick="() => ToggleQuiz(k)" class="@(isQuizzing[k] ? "quiz-on" : "quiz-off")">@(isQuizzing[k] ? "QUIZ ON" : "QUIZ OFF")</button>
                </td>
            }



        </tr>
    }
</table>




@code {
    string testMessage = "";
    // FOR MAIN INPUT BOX
    private int inputRadix = 2;
    private string inputString { get; set; } = ""; // main input box variable
    private int inputDecimal = 0;
    private int twosCompDecimal = 0;
    private string errorMessage { get; set; } = "";
    private FormModel formData = new FormModel();

    // FOR INDIVIDUAL INPUT BOXES
    public const int numOfColumns = 8; // Number of columns per row
    public const int numOfRows = 2;    // Number of rows
    public const int totalBoxes = numOfRows * numOfColumns; // Total boxes

    // FOR TWOS COMP BUTTONS
    private bool[] isTwosComp = new bool[numOfRows]; //stores state of twosComp button for each row

    // FOR DROPDOWN BOXES
    private int[] rowRadix = new int[numOfRows]; // number of rows; stores selected radix for each row
    private char[][] rowNum = new char[3][]; //jagged array, but could be 2D array?
                                             // Answers for text boxes
    private char[][] textValues = new char[numOfRows][]; // Text values displayed in grid
    private ElementReference[] textBoxRefs = new ElementReference[totalBoxes]; // Array to store references
    private char[][] savedValues = new char[numOfRows][]; // Saved input from user
    private char[][][] numAns = { new char[36][], new char[36][] }; // stores correct answers, including 2's Complement

    private List<int> options = new() { 2, 8, 10, 16 }; //options for dropdown boxes

    public Dictionary<char, int> charDict = new Dictionary<char, int> //for converting from characters to integers
    {
        { '0', 0 }, { '1', 1 }, { '2', 2 }, { '3', 3 }, { '4', 4 }, { '5', 5 },
        { '6', 6 }, { '7', 7 }, { '8', 8 }, { '9', 9 },
        { 'A', 10 }, { 'B', 11 }, { 'C', 12 }, { 'D', 13 }, { 'E', 14 },
        { 'F', 15 }, { 'G', 16 }, { 'H', 17 }, { 'I', 18 }, { 'J', 19 },
        { 'K', 20 }, { 'L', 21 }, { 'M', 22 }, { 'N', 23 }, { 'O', 24 },
        { 'P', 25 }, { 'Q', 26 }, { 'R', 27 }, { 'S', 28 }, { 'T', 29 },
        { 'U', 30 }, { 'V', 31 }, { 'W', 32 }, { 'X', 33 }, { 'Y', 34 }, { 'Z', 35 }
    };

    // Initialize boxes to zero
    // UPDATE ACCORDING TO DEFAULT RADIXES SELECTED
    protected override void OnInitialized()
    {


        for (int i = 0; i < numOfRows; i++)
        {
            textValues[i] = new char[numOfColumns];  // Initialize row
            savedValues[i] = new char[numOfColumns]; // Initialize row
        }

        for (int n = 0; n < 36; n++) // numAns has 2 layers
        {
            numAns[0][n] = new char[numOfColumns]; // Initialize rows
            numAns[1][n] = new char[numOfColumns]; //includes twos comp
        }

        // Now set values to zero
        for (int i = 0; i < numOfRows; i++)
        {
            for (int j = 0; j < numOfColumns; j++)
            {
                textValues[i][j] = '0';
                savedValues[i][j] = '\0';
                numAns[0][i][j] = '0';
                numAns[1][i][j] = '0';
            }
        }


        // initialize row radices
        for(int i = 0; i < numOfRows; i++)
        {
            if (i % 2 == 0)
                rowRadix[i] = 2;
            else
                rowRadix[i] = 10;
        }


        // initialize twos comp (optional)
        for(int i = 0; i < numOfRows; i++)
        {
            if (i % 4 == 0)
                isTwosComp[i] = true;
            else
                isTwosComp[i] = false;
        }

        // initialize submit box
        formData.input = "0";
        StateHasChanged(); // Update the UI after initialization
        HandleSubmit();


    }


    // FOR MAIN INPUT SUBMIT FORM - so submits on enter key
    private class FormModel
    {
        public string input { get; set; } = "";
    }

    // FOR MAIN DROPDOWN
    private void UpdateDropdown(ChangeEventArgs e)
    {
        inputRadix = Convert.ToInt32(e.Value);

        if(inputString != "")
        {
            HandleSubmit(); // execute submit
        }  
    }

    // Evaluate main input upon entry or hitting submit
    private void HandleSubmit()
    {
        errorMessage = "";
        inputString = formData.input.ToUpper();
        inputString = inputString.PadLeft(numOfColumns, '0');

        // Check if input is valid

        // Loop through string to make sure each char is valid
        foreach (char ch in inputString)
        {
            //if valid character, plug char into dictionary to compare to radix value
            if (!char.IsLetterOrDigit(ch) || charDict[ch] >= inputRadix)
            {
                errorMessage = "Input out of bounds of radix";
                return;
            }
        }


        // Calculate conversions; update decimal value
        ToDecimal(); 

        if(inputDecimal > ((int)Math.Pow(2, numOfColumns)-1))
        {
            errorMessage = "Value too large for 16-digit binary representation";
            return;
        }


        // Loop through rowRadix[] array to get radix number for each row
        //  Update values for each row accordingly in textBoxes[,]
        for(int i=0; i < numOfRows; i++)
        {


            FromDecimal(isTwosComp[i], rowRadix[i], i);
        }

        // If value given goes beyond positive limit
        if(inputDecimal >= (int)Math.Pow(2, numOfColumns-1))
        {
            errorMessage = "Value treated as negative (i.e. -" + ((int)Math.Pow(2, numOfColumns) - inputDecimal) + ") for " + numOfColumns +"-digit signed binary";
        }

    }

    // CALCULATES DECIMAL FROM MAIN INPUT
    private void ToDecimal()
    {
        //Use "inputRadix" and "inputString" to calculate decimal value "inputDecimal"
        inputDecimal = 0; //reset inputDecimal
        char[] inputArray = inputString.ToCharArray();
        inputArray = inputArray.Reverse().ToArray();

        for (int i = 0; i < inputArray.Length; i++)
        {
            inputDecimal += charDict[inputArray[i]] * (int)Math.Pow(inputRadix, i);
        }

        // Determin positive decimal value to represent twos complement
        twosCompDecimal = 0; //reset twosCompDecimal
        if (inputDecimal != 0)
            twosCompDecimal = Math.Abs((int)Math.Pow(2, numOfColumns) - inputDecimal);
        else
            twosCompDecimal = 0;


    }

    //CALCULATES NUMBER FROM DECIMAL ACCORDING TO GIVEN BASE AND ROW NUMBER
    private void FromDecimal(bool isTwosComp, int radix, int row)
    {

        int num = isTwosComp ? twosCompDecimal: inputDecimal;

        int twosComp = isTwosComp? 1: 0; //0 if normal, 1 if complement

        const string digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        for(int i=numOfColumns-1; i >= 0; i--)
        {
            if (num > 0)
            {
                int remainder = num % radix;
                testMessage = twosComp + " " + radix + " " + i;
                numAns[twosComp][radix][i] = digits[remainder];
                num /= radix;
            }
            else
                numAns[twosComp][radix][i] = '0';
        }

        //If quizzing is off, update text boxes for given row
        if(isQuizzing[row] == false)
            textValues[row] = numAns[twosComp][radix];

        StateHasChanged();
    }


    // Increase input by 1 and recalculate
    private void Increment()
    {
        int num = inputDecimal + 1;

        const string digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        for (int i = numOfColumns - 1; i >= 0; i--)
        {
            if (num > 0)
            {
                int remainder = num % inputRadix;
                numAns[0][inputRadix][i] = digits[remainder];
                num /= inputRadix;
            }
            else
                numAns[0][inputRadix][i] = '0';
        }

        formData.input = new string(numAns[0][inputRadix]);
        HandleSubmit();

    }

    // Decrease input by 1 and recalculate
    private void Decrement()
    {
        if (inputDecimal == 0) //exit if minimum value
            return;

        int num = inputDecimal - 1;

        const string digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        for (int i = numOfColumns - 1; i >= 0; i--)
        {
            if (num > 0)
            {
                int remainder = num % inputRadix;
                numAns[0][inputRadix][i] = digits[remainder];
                num /= inputRadix;
            }
            else
                numAns[0][inputRadix][i] = '0';
        }

        formData.input = new string(numAns[0][inputRadix]);
        HandleSubmit();
    }

    // TWOS COMPLEMENT TOGGLE/BUTTON
    private void TwosComp(int row)
    {
        isTwosComp[row] = !isTwosComp[row];

        //Update answer for row
        FromDecimal(isTwosComp[row], rowRadix[row], row);
    }


    // UPDATE RADIX FOR DROPDOWN FOR A GIVEN ROW
    private int GetDropdownValue(int index)
    {
        return rowRadix[index];
    }

    // CALCULATE CONVERSION NEEDED FOR GIVEN DROPDOWN
    private void RowCalculation(int rowNum, int selectedRadix)
    {
        rowRadix[rowNum] = selectedRadix; //update radix for given row

        // Update textbox values for row
        FromDecimal(isTwosComp[rowNum], selectedRadix, rowNum);

    }




    // functionality for QUIZ toggle button
    private bool[] isQuizzing = new bool[numOfRows];

    private void ToggleQuiz(int rowNum)
    {
        isQuizzing[rowNum] = !isQuizzing[rowNum];

        // if switched to on AND input box is empty,
        if(isQuizzing[rowNum])
        {
            // If no row is selected to quiz on, make Submit Answer button clickable

            //  assign values in textValues[] to savedValues[]
            for (int col = 0; col < numOfColumns; col++)
            {
                textValues[rowNum][col] = ' ';
            }
            // 
        }
        else //quizzing is switched off
        {

            //deactivate submit answer button

            // bind text boxes to numAns[]
            int twosComp = isTwosComp[rowNum] ? 1 : 0; //0 if normal, 1 if complement
            textValues[rowNum] = numAns[twosComp][rowRadix[rowNum]];
            StateHasChanged();
        }
        // Loop through

    }

    private void GenerateRand()
    {

    }






    // Method to gray out all textboxes
    private async Task GrayOutTextboxes(ElementReference[] boxRefs)
    {
        await JS.InvokeVoidAsync("grayOutElements", boxRefs);
    }

    // Method to enable all textboxes
    private async Task EnableTextboxes(ElementReference[] boxRefs)
    {
        await JS.InvokeVoidAsync("enableElements", boxRefs);
    }

    // for main input box
    private async Task SelectTextBox()
    {
        // Call the JavaScript function using JS Interop to select the text
        await JS.InvokeVoidAsync("selectTextBox", "firstInput");
    }

    // for individual boxes created from array
    private async Task HandleInputClick(MouseEventArgs e, int index)
    {
        // Get the ElementReference from the dictionary based on the unique ID
        if (index < totalBoxes)
        {
            // Use JavaScript Interop to select all text inside the input box
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index]);
        }
    }

    // HANDLES INPUT
    private async Task MoveNext(ChangeEventArgs e, int row, int col, int index)
    {

        string input = e.Value?.ToString() ?? "";
        if (input != "")
        {
            char inChar = char.Parse(input);

            //if (char.IsLetterOrDigit(inChar))
            // Check if the character is valid (e.g., letter or digit)


            textValues[row][col] = inChar; // Update the character
            savedValues[row][col] = inChar;

            await AutoTab(row, col, index);
                    
        }
        else

        // COMPARE CHAR/DIGIT WITH ANS TO CHANGE COLOR OF TEXT


        StateHasChanged();//update

    }

    // REPLACES BLANK BOXES WITH '0'
    private async Task FillWhitespace(int index)
    {
        // Use JavaScript Interop to directly update the value if it's empty
        await JS.InvokeVoidAsync("setInputToZeroIfEmpty", textBoxRefs[index]);
    }

    // HANDLES OTHER KEYS ENTERED FOR NAVIGATION    
    private async Task HandleKeyNavigation(KeyboardEventArgs e, int row, int col, int index)
    {
        if (e.Key == "ArrowLeft" && index > 0)
        {
            await textBoxRefs[index - 1].FocusAsync();
            //await JS.InvokeVoidAsync("focusElement", textBoxRefs[index - 1]); // Move left
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index - 1]);
        }
        else if ((e.Key == "ArrowRight" || e.Key == "Enter") && index < totalBoxes)
        {
            await textBoxRefs[index + 1].FocusAsync();
            //await JS.InvokeVoidAsync("focusElement", textBoxRefs[index + 1]); // Move right
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index + 1]);
        }
        

        

    }



    private async Task AutoTab(int row, int col, int index)
    {


        if (index < textBoxRefs.Length - 1 && textValues[row][col] != '\0') //i.e. less than numOfRows * numOfColumns - 1
        {
            await Task.Delay(50); // Small delay for UI update
                                  //await textBoxRefs[index + 1].FocusAsync(); // Move focus
            await JS.InvokeVoidAsync("focusElement", textBoxRefs[index + 1]); // Select text
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index + 1]); // Select text
        }
    }

    
    //


}



@*

If we want to do autofill for hints

data-active="@isActive"
@onblur="(e) => FillWhitespace(index)"


<input type="text" data-active="@isActive" @onblur="EnsureNotEmpty" @bind="inputValue">
<p>Data-active: @isActive</p>

@code {
    private bool isActive = true;
    private string inputValue = "0";

    private void EnsureNotEmpty()
    {
        if (string.IsNullOrWhiteSpace(inputValue))
        {
            inputValue = "0"; // Reset if empty
        }
    }
}




@page "/enter-focus"

<input id="input1" type="text" onkeydown="moveNext(event, 'input2')" />
<input id="input2" type="text" onkeydown="moveNext(event, 'input3')" />
<input id="input3" type="text" />

@code {
    [Inject] IJSRuntime JS { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupEnterKey");
        }
    }
}


 /*
    private Dictionary<string, ElementReference> inputRefs = new Dictionary<string, ElementReference>(); // Dictionary to store references
    private string clickedId = ""; // Variable to store clicked input's unique ID

    // Handle the click event and select all text in the clicked input
    private async Task HandleInputClick(MouseEventArgs e, string uniqueId)
        {
        clickedId = uniqueId; // Set the clicked ID for display
        Console.WriteLine($"Input clicked with unique ID: {clickedId}");

        // Get the ElementReference from the dictionary based on the unique ID
        if (inputRefs.TryGetValue(uniqueId, out var element))
            {
            // Use JavaScript Interop to select all text inside the input box
            await JSRuntime.InvokeVoidAsync("selectText", element);
    }
    }
    */


@* Example functionality to have cursor active in a given text box after hitting submit*@
@* See function in site.js file in wwwroot*@
@*
<input id="myInput" type="text" placeholder="Click the button" class="form-control" />
<input id="myInput1" type="text" placeholder="Click the button" class="form-control" />

<button @onclick="SetFocus">Focus Input</button>

@code {
    [Inject] IJSRuntime JS { get; set; }

    private async Task SetFocus()
    {
        await JS.InvokeVoidAsync("focusInput", "myInput1"); /* Change "myInput" to the id of the text box you want to go to? */
    }
}
*@

