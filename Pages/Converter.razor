@inject IJSRuntime JS
@page "/learnyourbases"


<PageTitle>Learn Your Bases!</PageTitle>

<h3></h3>


<div class="row">
    
    <p style="font-size: 14px;">
        <span style="font-size: 24px; text-decoration: underline;">
            Learn Your Bases! 
        </span><br />
        Enter a number in the first input box.  Indicate which base system you are using in the dropdown. <br />
        Customize QUIZ ON/QUIZ OFF toggles for each row to test your knowledge converting between different base systems. <br />
        When quizzing for a given row, fill in the appropriate digits to clear the <span style="color: red;">red</span>!
    </p>
    
</div>

@* Make body shrinkable - able to scroll if elements go off screen *@
<div style="display: flex;">
<div style="flex-shrink: 1; overflow: auto;">


@*INPUT SELECTION ROW*@


<div class="row" style="height: 100px" >


    @***MAIN DROPDOWN***@



    <label class="col-auto" for="maindropdown">Base/Radix:</label>
    <select class="col-auto" id="maindropdown" @onchange="UpdateDropdown">
        @foreach (var option in options)
        {
            <option value="@option">@option</option>
        }
    </select>




    @***INPUT BOX***@
    <div class="col-auto">

        @** increment/decrement buttons *@
        <div class="col-auto">
            <div class="vertical-container" style="gap: 10px">

                <button class="trianglebutton" @onclick="Increment">&#9650; </button> <!-- Up triangle -->
                <button class="trianglebutton" @onclick="Decrement">&#9660; </button> <!-- Down triangle -->

            </div>
        </div>

        <EditForm Model="@formData" OnValidSubmit="HandleSubmit" class="row">
            @* input  box *@
            <div class="col-auto"><InputText id="firstinput" onclick="selectTextBox" @bind-Value="formData.input" style="font-size:26; text-transform: uppercase" maxlength="16" /></div>

            @* submit button*@
            <div class="col-auto"><button type="submit" class="edit-button">Submit</button></div>

        </EditForm>

    </div>

    <div class="col-auto">
        <button @onclick="GenerateRand" class="edit-button">Random Number</button>

    </div>

    <div class="col-auto" style="gap: 30px;">


        <div>
            <label class="form-label" for="digits"># of digits:</label>
            <select id="digits" @onchange="UpdateDropdown">
                @foreach (var option in options)
                {
                    <option value="@option">@option</option>
                }
            </select>
        </div>

        <div>
            <label class="form-label" for="rows"># of rows:</label>
            <select class="col-auto" id="rows" @onchange="UpdateDropdown">
                @foreach (var option in options)
                {
                    <option value="@option">@option</option>
                }
            </select>
        </div>

    </div>

</div>

<!-- End INPUT SELECTION ROW-->
<div class="col-auto">
    <p>Input (max @numOfColumns characters) - Values above @(Math.Pow(2, numOfColumns) - 1) will not be accepted  <span style="color: red"> @errorMessage </span></p>
</div>



<!-- Begin body of page -->

<table >
    @for (int row = 0; row < numOfRows; row++)
    {


        <tr>
            @for (int col = 0; col < numOfColumns; col++)
            {
                int i = row;
                int j = col;
                int index = i * numOfColumns + j; // Calculate the index based on row and column
                <td>

                    <input @ref="textBoxRefs[index]"
                    value="@textValues[i][j]"
                    @onclick="(e) => HandleInputClick(e, index)"
                    @oninput="(e) => MoveNext(e, i , j, index)"
                    @onkeyup="(e) => HandleKeyNavigation(e, i, j, index)"

                    readonly="@(!isQuizzing[i])"
                    class="form-control text-center mx-1 @GetColorClass(i, j)"
                    maxlength="1"
                    style="width: 50px; display: inline-block" />

                    <p> &nbsp;&nbsp;&nbsp;@rowRadix[i]<sup>@(numOfColumns - 1 - j)  </sup> </p>
                </td>

            }

            @{
                int k = row;
                <td class="col-auto" style="gap: 10px">
                    <select @bind:get="GetDropdownValue(k)" @bind:set="newValue => RowCalculation(k, newValue)">
                        @foreach (var option in options)
                        {
                            <option value="@option">@option</option>
                        }
                    </select>

                    <button @onclick="() => TwosComp(k)" class="@(isTwosComp[k]==1 ? "toggle-on" : "toggle-off")">2's Complement</button>

                    <button @onclick="() => ToggleQuiz(k)" class="@(isQuizzing[k] ? "quiz-on" : "quiz-off")">@(isQuizzing[k] ? "QUIZ ON" : "QUIZ OFF")</button>
                </td>

            }



        </tr>
    }
</table>
</div>

</div>

@*@onblur="(e) => FillWhitespace(i, j, index)"*@


@code {

    // FOR MAIN INPUT BOX
    private int inputRadix = 2;
    private string inputString { get; set; } = ""; // main input box variable
    private int inputDecimal = 0;
    private int twosCompDecimal = 0;
    private string errorMessage { get; set; } = "";
    private FormModel formData = new FormModel();

    // FOR INDIVIDUAL INPUT BOXES
    public const int numOfColumns = 8; // Number of columns per row
    public const int numOfRows = 2;    // Number of rows
    public const int totalBoxes = numOfRows * numOfColumns; // Total boxes

    // FOR TWOS COMP BUTTONS
    private int[] isTwosComp = new int[numOfRows]; //stores state of twosComp button for each row

    // FOR DROPDOWN BOXES
    private int[] rowRadix = new int[numOfRows]; // number of rows; stores selected radix for each row
    private char[][] rowNum = new char[3][]; //jagged array, but could be 2D array?
    private List<int> options = new() { 2,8,10,16,3,4,5,6,7,9,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36 }; //options for dropdown boxes

    // FOR ROWS OF INPUT BOXES
    private ElementReference[] textBoxRefs = new ElementReference[totalBoxes]; // Array to store references - for more UI/interface control
    private char[][] textValues = new char[numOfRows][]; // Text values displayed in grid
    private char[][] savedValues = new char[numOfRows][]; // Saved input from user
    private char[][][] numAns = { new char[37][], new char[37][] }; // stores correct answers, including 2's Complement


    private bool[] isQuizzing = new bool[numOfRows];

    private int[][] boxColor = new int[numOfRows][]; //set to either 0, 1, or 2 (default, green, red)
    private string[] colorClass = { "", "green-box", "red-box" };



    public Dictionary<char, int> charDict = new Dictionary<char, int> //for converting from characters to integers
    {
        { '0', 0 }, { '1', 1 }, { '2', 2 }, { '3', 3 }, { '4', 4 }, { '5', 5 },
        { '6', 6 }, { '7', 7 }, { '8', 8 }, { '9', 9 },
        { 'A', 10 }, { 'B', 11 }, { 'C', 12 }, { 'D', 13 }, { 'E', 14 },
        { 'F', 15 }, { 'G', 16 }, { 'H', 17 }, { 'I', 18 }, { 'J', 19 },
        { 'K', 20 }, { 'L', 21 }, { 'M', 22 }, { 'N', 23 }, { 'O', 24 },
        { 'P', 25 }, { 'Q', 26 }, { 'R', 27 }, { 'S', 28 }, { 'T', 29 },
        { 'U', 30 }, { 'V', 31 }, { 'W', 32 }, { 'X', 33 }, { 'Y', 34 }, { 'Z', 35 }
    };

    // Initialize boxes to zero
    // UPDATE ACCORDING TO DEFAULT RADIXES SELECTED
    protected override void OnInitialized()
    {


        for (int i = 0; i < numOfRows; i++)
        {
            textValues[i] = new char[numOfColumns];  // Initialize row
            savedValues[i] = new char[numOfColumns]; // Initialize row

            boxColor[i] = new int[numOfColumns];
        }

        for (int n = 0; n < 37; n++) // numAns has 2 layers
        {
            numAns[0][n] = new char[numOfColumns]; // Initialize rows
            numAns[1][n] = new char[numOfColumns]; //includes twos comp

            for(int i= 0; i < numOfColumns; i++)
            {
                numAns[0][n][i] = '0';
                numAns[1][n][i] = '0';
            }
        }

        // Now set values to zero
        for (int i = 0; i < numOfRows; i++)
        {
            for (int j = 0; j < numOfColumns; j++)
            {

                savedValues[i][j] = '0';
            }
        }



        // initialize row radices
        for(int i = 0; i < numOfRows; i++)
        {
            if (i % 2 == 0)
                rowRadix[i] = 2;
            else
                rowRadix[i] = 10;
        }


        // initialize twos comp (optional)
        for(int i = 0; i < numOfRows; i++)
        {
            if (i % 4 == 0)
                isTwosComp[i] = 1;
            else
                isTwosComp[i] = 0;
        }

        // initialize submit box
        formData.input = "0";
        StateHasChanged(); // Update the UI after initialization
        HandleSubmit();


        // initialize boxColor[][]


    }


    // FOR MAIN INPUT SUBMIT FORM - so submits on enter key
    private class FormModel
    {
        public string input { get; set; } = "";
    }

    // FOR MAIN DROPDOWN
    private void UpdateDropdown(ChangeEventArgs e)
    {
        inputRadix = Convert.ToInt32(e.Value);

        /*
        if(inputString != "")
            {
            HandleSubmit(); // execute submit
        }  */
    }

    // Evaluate main input upon entry or hitting submit
    private void HandleSubmit()
    {
        errorMessage = "";
        inputString = formData.input.ToUpper();


        inputString = inputString.PadLeft(numOfColumns, '0');

        // Check if input is valid

        // Loop through string to make sure each char is valid
        foreach (char ch in inputString)
        {
            //if valid character, plug char into dictionary to compare to radix value
            if (!char.IsLetterOrDigit(ch) || charDict[ch] >= inputRadix)
            {
                errorMessage = "Input has character unfamiliar to the selected base system";
                return;
            }
        }


        // Calculate conversions; update decimal value
        //Use "inputRadix" and "inputString" to calculate decimal value "inputDecimal"
        inputDecimal = 0; //reset inputDecimal
        char[] inputArray = inputString.ToCharArray();
        inputArray = inputArray.Reverse().ToArray();

        for (int i = 0; i < inputArray.Length; i++)
        {
            inputDecimal += charDict[inputArray[i]] * (int)Math.Pow(inputRadix, i);

            if (inputDecimal > ((int)Math.Pow(2, numOfColumns) - 1))
            {
                errorMessage = "Value too large for " + numOfColumns + "-digit binary representation";
                inputDecimal = 0;
                return;
            }
        }
        // Determine positive decimal value to represent twos complement
        twosCompDecimal = 0; //reset twosCompDecimal
        if (inputDecimal != 0)
            twosCompDecimal = Math.Abs((int)Math.Pow(2, numOfColumns) - inputDecimal);
        else
            twosCompDecimal = 0;




        // Loop through rowRadix[] array to get radix number for each row
        //  Update values for each row accordingly in textBoxes[,]
        for(int i=0; i < numOfRows; i++)
        {

            FromDecimal(isTwosComp[i], rowRadix[i], i);
        }

        // If value given goes beyond positive limit
        if(inputDecimal >= (int)Math.Pow(2, numOfColumns-1))
        {
            errorMessage = "Value treated as negative (i.e. -" + ((int)Math.Pow(2, numOfColumns) - inputDecimal) + ") for " + numOfColumns +"-digit signed binary";
        }

    }

    //CALCULATES NUMBER FROM DECIMAL ACCORDING TO GIVEN BASE AND ROW NUMBER
    private void FromDecimal(int isTwosComp, int radix, int row)
    {

        int num = isTwosComp == 1? twosCompDecimal : inputDecimal;

        const string digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";


        for(int i=numOfColumns-1; i >= 0; i--)
        {
            if (num > 0)
            {
                int remainder = num % radix;
                numAns[isTwosComp][radix][i] = digits[remainder];
                num /= radix;
            }
            else
                numAns[isTwosComp][radix][i] = '0';
        }
        StateHasChanged();

        //If quizzing is off, update text boxes for given row
        if (isQuizzing[row] == false)
        {
            int x = 0;
            foreach(char value in numAns[isTwosComp][radix])
            {
                textValues[row][x++] = value;
            }

        }     
        else
        {
            // reset values in row for user to change
            for (int j = 0; j < numOfColumns; j++)
            {
                savedValues[row][j] = '0';
                textValues[row][j] = '0';
            }

            // Set colors of boxes for row
            CheckAnswers(row);
        }



        StateHasChanged();
    }


    // Increase input by 1 and recalculate
    private void Increment()
    {
        //Reset if error
        errorMessage = "";


        //Increment
        int num = inputDecimal + 1;

        const string digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        for (int i = numOfColumns - 1; i >= 0; i--)
        {
            if (num > 0)
            {
                int remainder = num % inputRadix;
                numAns[0][inputRadix][i] = digits[remainder];
                num /= inputRadix;
            }
            else
                numAns[0][inputRadix][i] = '0';
        }


        formData.input = new string(numAns[0][inputRadix]);
        StateHasChanged();
        HandleSubmit();

    }

    // Decrease input by 1 and recalculate
    private void Decrement()
    {
        // Reset if error
        errorMessage = "";


        //handle minimum value
        if (inputDecimal == 0)
            inputDecimal = 1;

        // Decrement
        int num = inputDecimal - 1;

        const string digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        for (int i = numOfColumns - 1; i >= 0; i--)
        {
            if (num > 0)
            {
                int remainder = num % inputRadix;
                numAns[0][inputRadix][i] = digits[remainder];
                num /= inputRadix;
            }
            else
                numAns[0][inputRadix][i] = '0';
        }

        formData.input = new string(numAns[0][inputRadix]);
        HandleSubmit();
    }

    // TWOS COMPLEMENT TOGGLE/BUTTON
    private void TwosComp(int row)
    {
        // flip value
        if (isTwosComp[row] == 0)
            isTwosComp[row] = 1;
        else
            isTwosComp[row] = 0;

        //Update answer for row
        FromDecimal(isTwosComp[row], rowRadix[row], row);
    }


    // UPDATE RADIX FOR DROPDOWN FOR A GIVEN ROW
    private int GetDropdownValue(int index)
    {
        return rowRadix[index];
    }

    // CALCULATE CONVERSION NEEDED FOR GIVEN DROPDOWN
    private void RowCalculation(int rowNum, int selectedRadix)
    {
        rowRadix[rowNum] = selectedRadix; //update radix for given row

        // Update textbox values for row
        FromDecimal(isTwosComp[rowNum], selectedRadix, rowNum);

    }




    // functionality for QUIZ toggle button

    private void ToggleQuiz(int rowNum)
    {
        isQuizzing[rowNum] = !isQuizzing[rowNum];

        // if switched to on AND input box is empty,
        if(isQuizzing[rowNum])
        {
            // If no row is selected to quiz on, make Submit Answer button clickable

            // set values to zero
            for(int i =0; i < numOfColumns; i++)
            {
                savedValues[rowNum][i] = '0';
            }

            //  assign values in savedValues[] to textValues[]
            Array.Copy(savedValues[rowNum], textValues[rowNum], numOfColumns);

            // Check answers for row - update colors
            CheckAnswers(rowNum);


        }
        else //quizzing is switched off
        {

            //deactivate submit answer button

            // bind text boxes to numAns[]
            Array.Copy(numAns[isTwosComp[rowNum]][rowRadix[rowNum]], textValues[rowNum], numOfColumns);

            // loop through row to change box color back to default
            for (int i = 0; i < numOfColumns; i++)
            {
                boxColor[rowNum][i] = 0; // '0' corresponds to default
            }
        }

        StateHasChanged();


    }

    private void CheckAnswers(int rowNum)
    {
        // Loop through row to check answers
        for (int i = 0; i < numOfColumns; i++)
        {
            if (savedValues[rowNum][i] == numAns[isTwosComp[rowNum]][rowRadix[rowNum]][i])
            {
                boxColor[rowNum][i] = 0; // set to clear
            }
            else
                boxColor[rowNum][i] = 2; // clear color
        }

    }

    // Functionality for color of box

    private string GetColorClass(int row, int col)
    {
        return colorClass[boxColor[row][col]];
    }


    private void GenerateRand()
    {

    }



    // for main input box
    private async Task SelectTextBox()
    {
        // Call the JavaScript function using JS Interop to select the text
        await JS.InvokeVoidAsync("selectTextBox", "firstInput");
    }

    // for individual boxes created from array
    private async Task HandleInputClick(MouseEventArgs e, int index)
    {
        // Get the ElementReference from the dictionary based on the unique ID
        if (index < totalBoxes)
        {
            // Use JavaScript Interop to select all text inside the input box
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index]);
        }
    }

    // HANDLES INPUT
    private async Task MoveNext(ChangeEventArgs e, int row, int col, int index)
    {

        string input = e.Value?.ToString()?.ToUpper() ?? "";
        if (input != "")
        {
            char inChar = char.Parse(input);

            // Check if the character is valid (e.g., letter or digit)
            if (char.IsLetterOrDigit(inChar))
            {
                textValues[row][col] = inChar; // Update the character
                savedValues[row][col] = inChar;
                await AutoTab(row, col, index);

                // COMPARE CHAR/DIGIT WITH ANS TO CHANGE COLOR OF TEXT
                if (textValues[row][col] == numAns[isTwosComp[row]][rowRadix[row]][col])
                {
                    boxColor[row][col] = 0; // set to clear
                }
                else
                    boxColor[row][col] = 2; // set to clear
             
            }
            else // not acceptable character
            {
                await AutoTab(row, col, index);
                textValues[row][col] = '0'; // Update the character
                savedValues[row][col] = '0';

                boxColor[row][col] = 2; // set to red
            }
      

        }
        else{
            textValues[row][col] = '0'; // Update the character
            savedValues[row][col] = '0';

            boxColor[row][col] = 2; // red color
        }

        StateHasChanged();


       

    }


    // HANDLES OTHER KEYS ENTERED FOR NAVIGATION    
    private async Task HandleKeyNavigation(KeyboardEventArgs e, int row, int col, int index)
    {
        if ((e.Key == "ArrowLeft" || e.Key == "Backspace") && index > 0)
        {
            await textBoxRefs[index - 1].FocusAsync();
            //await JS.InvokeVoidAsync("focusElement", textBoxRefs[index - 1]); // Move left
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index - 1]);
        }
        else if ((e.Key == "ArrowRight" || e.Key == "Enter") && index < totalBoxes-1)
        {
            await textBoxRefs[index + 1].FocusAsync();
            //await JS.InvokeVoidAsync("focusElement", textBoxRefs[index + 1]); // Move right
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index + 1]);
        }



    }

    private async Task AutoTab(int row, int col, int index)
    {


        if ((index + 1) % numOfColumns != 0 && textValues[row][col] != '\0') //i.e. not at end of row AND not backspace
        {
            await Task.Delay(50); // Small delay for UI update
                                  //await textBoxRefs[index + 1].FocusAsync(); // Move focus
            await JS.InvokeVoidAsync("focusElement", textBoxRefs[index + 1]); // Select text
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index + 1]); // Select text
        }
        else if ((index+1) % numOfColumns == 0) //end of row
        {
            await JS.InvokeVoidAsync("focusElement", textBoxRefs[index+1 - numOfColumns]); // Select text
            await JS.InvokeVoidAsync("selectText", textBoxRefs[index+1 - numOfColumns]); // Select text
        }
    }

    // REPLACES BLANK BOXES WITH '0'
    private async Task FillWhitespace(int row, int col, int index)
    {
        // Use JavaScript Interop to directly update the value if it's empty
        await JS.InvokeVoidAsync("setInputToZeroIfEmpty", textBoxRefs[index]);

    }
    
    

}



@*

If we want to do autofill for hints

data-active="@isActive"
@onblur="(e) => FillWhitespace(index)"


<input type="text" data-active="@isActive" @onblur="EnsureNotEmpty" @bind="inputValue">
<p>Data-active: @isActive</p>

@code {
    private bool isActive = true;
    private string inputValue = "0";

    private void EnsureNotEmpty()
    {
        if (string.IsNullOrWhiteSpace(inputValue))
        {
            inputValue = "0"; // Reset if empty
        }
    }
}




@page "/enter-focus"

<input id="input1" type="text" onkeydown="moveNext(event, 'input2')" />
<input id="input2" type="text" onkeydown="moveNext(event, 'input3')" />
<input id="input3" type="text" />

@code {
    [Inject] IJSRuntime JS { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupEnterKey");
        }
    }
}


 /*
    private Dictionary<string, ElementReference> inputRefs = new Dictionary<string, ElementReference>(); // Dictionary to store references
    private string clickedId = ""; // Variable to store clicked input's unique ID

    // Handle the click event and select all text in the clicked input
    private async Task HandleInputClick(MouseEventArgs e, string uniqueId)
        {
        clickedId = uniqueId; // Set the clicked ID for display
        Console.WriteLine($"Input clicked with unique ID: {clickedId}");

        // Get the ElementReference from the dictionary based on the unique ID
        if (inputRefs.TryGetValue(uniqueId, out var element))
            {
            // Use JavaScript Interop to select all text inside the input box
            await JSRuntime.InvokeVoidAsync("selectText", element);
    }
    }
    */


@* Example functionality to have cursor active in a given text box after hitting submit*@
@* See function in site.js file in wwwroot*@
@*
<input id="myInput" type="text" placeholder="Click the button" class="form-control" />
<input id="myInput1" type="text" placeholder="Click the button" class="form-control" />

<button @onclick="SetFocus">Focus Input</button>

@code {
    [Inject] IJSRuntime JS { get; set; }

    private async Task SetFocus()
    {
        await JS.InvokeVoidAsync("focusInput", "myInput1"); /* Change "myInput" to the id of the text box you want to go to? */
    }
}
*@

