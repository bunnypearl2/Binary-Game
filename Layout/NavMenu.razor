@inject IJSRuntime JSRuntime


<nav class="nav-container">
    <ul class="nav-list">
        <li class="nav-item dropdown">
            <a href="#">☰ My Conversion Tutor ▼</a>
            <ul class="dropdown-menu">
                <li><a href="/">Home</a></li>
                <li><a href="/counter">Counter</a></li>
                <li><a href="/other">Other</a></li>
                <li><a href="/test1">Test1</a></li>
                <li><a href="/cheatsheet">CheatSheet</a></li>
                <li><a href="/endian">Endian</a></li>
            </ul>
        </li>
    </ul>
    <label class="toggle-container">
        <input type="checkbox" value="@IsDarkMode" @onchange="ToggleTheme">
        <span class="slider"></span>
        <span class="toggle-label">@(IsDarkMode? "Dark Mode": "Light Mode")</span>
    </label>
</nav>

@code {
    private bool IsDarkMode = false;
    
    @*Saves theme if reloaded, but the toggle doesn't adjust accordingly (i.e. goes back to off even if dark mode is on)
    protected override async Task OnInitializedAsync()
    {
        var storedValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");

        if (string.IsNullOrEmpty(storedValue))
        {
            // Default to Light Mode
            IsDarkMode = false;
        }
        else
        {
            // Use saved theme from localStorage
            IsDarkMode = storedValue == "dark";
        }

        await ApplyTheme();
    }
    *@
    private async Task ToggleTheme(ChangeEventArgs e)
    {
        IsDarkMode = (bool)e.Value;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "theme", IsDarkMode ? "dark" : "light");
        await ApplyTheme();
    }

    private async Task ApplyTheme()
    {
        var themeClass = IsDarkMode ? "dark-mode" : "";
        await JSRuntime.InvokeVoidAsync("applyTheme", themeClass);
    }
 }
